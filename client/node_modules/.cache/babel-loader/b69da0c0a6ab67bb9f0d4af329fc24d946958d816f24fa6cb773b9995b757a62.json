{"ast":null,"code":"var _jsxFileName = \"/Users/jaime/Documents/Personal/Code Repos/BudgetApp/client/src/pages/NewTransaction.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useLocation, Navigate, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { MyContext } from \"../MyContext\";\nimport styles from \"../pageStyling/NewTransaction.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewTransaction = () => {\n  _s();\n  const {\n    user_id,\n    validated\n  } = useContext(MyContext);\n  const [transaction_type, setTransactionType] = useState(\"spending\");\n  const [amount, setAmount] = useState(0.00);\n  const [error, setError] = useState(null);\n  const [balance_id, setBalanceID] = useState(0);\n  const [transaction_name, setTransactionName] = useState(\"\");\n  const [to_balance_id, setToBalanceID] = useState(null); // For transfer transactions\n  const [balances, setBalances] = useState([]);\n  const [balance_type, setBalanceType] = useState(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Fetch balances and set transaction type from query params\n  useEffect(() => {\n    const fetchBalances = async () => {\n      try {\n        const response = await axios.get('/api/getBalances', {\n          params: {\n            user_id\n          }\n        });\n        if (response.data.length > 0) {\n          setBalances(response.data);\n          setBalanceID(response.data[0].balance_id);\n        } else {\n          setError(\"No balances available. Please create a balance first.\");\n        }\n        var i;\n        for (i = 0; i < balances.length; i++) {\n          if (balances[i].balance_type !== 'credit') {\n            setBalanceType(balances[i].balance_type);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching balances:\", error);\n        setError(\"Failed to load balances.\");\n      }\n    };\n    fetchBalances();\n    const params = new URLSearchParams(location.search);\n    const type = params.get(\"type\");\n    if (type) setTransactionType(type);\n  }, [user_id, location.search]);\n  const createTransaction = async e => {\n    e.preventDefault();\n    setError(null);\n    if (!transaction_name.trim() || !balance_id || amount <= 0 || transaction_type === \"transfer\" && !to_balance_id) {\n      setError(\"All fields are required, and amount must be greater than 0.\");\n      return;\n    }\n    if (transaction_type === \"transfer\" && !to_balance_id) {\n      setError(\"Target balance must be selected for transfer transactions.\");\n      return;\n    }\n\n    // Disallow transfer to/from credit balance types\n    if (transaction_type === \"transfer\" && to_balance_id === balance_id) {\n      setError(\"Cannot transfer to the same balance.\");\n      return;\n    }\n    console.log(\"Spending Balance Type:\", balance_type);\n    try {\n      // Step 1: Create the transaction\n      await axios.post(\"/api/newTransactions\", {\n        user_id,\n        balance_id,\n        balance_type,\n        transaction_name,\n        transaction_type,\n        amount,\n        to_balance_id: transaction_type === \"transfer\" || transaction_type === \"pay credit\" ? to_balance_id : null\n      });\n      navigate(\"/transactionmanager\");\n    } catch (e) {\n      console.error(\"Error creating transaction:\", e);\n      setError(\"An error occurred. Please try again.\");\n    }\n  };\n  if (!validated) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 28\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"New Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: createTransaction,\n      className: styles.newTransactionBox,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transaction Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: transaction_name,\n        onChange: e => setTransactionName(e.target.value),\n        placeholder: \"e.g., Groceries\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transaction Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: transaction_type,\n        onChange: e => setTransactionType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"spending\",\n          children: \"Spending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"income\",\n          children: \"Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"transfer\",\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pay credit\",\n          children: \"Pay Credit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: balance_id,\n        onChange: e => {\n          const selectedBalanceId = e.target.value;\n          setBalanceID(selectedBalanceId);\n\n          // Find the selected balance object\n          const selectedBalance = balances.find(b => b.balance_id.toString() === selectedBalanceId);\n\n          // Set the balance type if a balance is selected\n          if (selectedBalance) {\n            setBalanceType(selectedBalance.balance_type);\n          } else {\n            setBalanceType(null); // Reset balance type if no balance is selected\n          }\n        },\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), balances.filter(b => {\n          if (transaction_type === \"pay credit\" || transaction_type === \"transfer\" || transaction_type === \"income\") {\n            return b.balance_id.toString() !== to_balance_id &&\n            // Exclude the selected \"Select Balance\"\n            b.balance_type !== \"credit\"; // Exclude balances with the type \"credit\"\n          }\n          return true;\n        }).map(balance => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: balance.balance_id,\n          children: balance.balance_name\n        }, balance.balance_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), transaction_type === \"transfer\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"To Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: to_balance_id,\n          onChange: e => setToBalanceID(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), balances.filter(b => b.balance_id.toString() !== balance_id &&\n          // Exclude the selected \"Select Balance\"\n          b.balance_type !== \"credit\" // Exclude balances with the type \"credit\"\n          ).map(balance => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: balance.balance_id,\n            children: balance.balance_name\n          }, balance.balance_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), transaction_type === \"pay credit\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"To Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: to_balance_id,\n          onChange: e => setToBalanceID(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this), balances.filter(b => b.balance_id.toString() !== balance_id &&\n          // Exclude the selected \"Select Balance\"\n          b.balance_type !== \"wallet\" // Exclude balances with the type \"wallet\"\n          ).map(balance => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: balance.balance_id,\n            children: balance.balance_name\n          }, balance.balance_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(parseFloat(e.target.value)),\n        placeholder: \"0.00\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.submitButton,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.returnButton,\n        onClick: () => navigate(-1),\n        children: \"Return\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.error,\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(NewTransaction, \"ro2DVvvJTRjcmObuw0SwI64c2ds=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = NewTransaction;\nexport default NewTransaction;\nvar _c;\n$RefreshReg$(_c, \"NewTransaction\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useLocation","Navigate","useNavigate","axios","MyContext","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","NewTransaction","_s","user_id","validated","transaction_type","setTransactionType","amount","setAmount","error","setError","balance_id","setBalanceID","transaction_name","setTransactionName","to_balance_id","setToBalanceID","balances","setBalances","balance_type","setBalanceType","location","navigate","fetchBalances","response","get","params","data","length","i","console","URLSearchParams","search","type","createTransaction","e","preventDefault","trim","log","post","to","fileName","_jsxFileName","lineNumber","columnNumber","className","container","children","title","onSubmit","newTransactionBox","value","onChange","target","placeholder","required","selectedBalanceId","selectedBalance","find","b","toString","filter","map","balance","balance_name","parseFloat","submitButton","returnButton","onClick","_c","$RefreshReg$"],"sources":["/Users/jaime/Documents/Personal/Code Repos/BudgetApp/client/src/pages/NewTransaction.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useLocation, Navigate, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { MyContext } from \"../MyContext\";\nimport styles from \"../pageStyling/NewTransaction.module.css\";\n\nconst NewTransaction = () => {\n    const { user_id, validated } = useContext(MyContext);\n    const [transaction_type, setTransactionType] = useState(\"spending\");\n    const [amount, setAmount] = useState(0.00);\n    const [error, setError] = useState(null);\n    const [balance_id, setBalanceID] = useState(0);\n    const [transaction_name, setTransactionName] = useState(\"\");\n    const [to_balance_id, setToBalanceID] = useState(null); // For transfer transactions\n    const [balances, setBalances] = useState([]);\n    const [balance_type, setBalanceType] = useState(null);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    // Fetch balances and set transaction type from query params\n    useEffect(() => {\n        const fetchBalances = async () => {\n            try {\n                const response = await axios.get('/api/getBalances', { params: { user_id } });\n                if (response.data.length > 0) {\n                    setBalances(response.data);\n                    setBalanceID(response.data[0].balance_id);\n                } else {\n                    setError(\"No balances available. Please create a balance first.\");\n                }\n\n                var i;\n                for (i = 0; i < balances.length; i++) {\n                    if (balances[i].balance_type !== 'credit') {\n                        setBalanceType(balances[i].balance_type);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error fetching balances:\", error);\n                setError(\"Failed to load balances.\");\n            }\n        };\n        fetchBalances();\n\n        const params = new URLSearchParams(location.search);\n        const type = params.get(\"type\");\n        if (type) setTransactionType(type);\n    }, [user_id, location.search]);\n\n    const createTransaction = async (e) => {\n        e.preventDefault();\n        setError(null);\n\n        if (!transaction_name.trim() || !balance_id || amount <= 0 || (transaction_type === \"transfer\" && !to_balance_id)) {\n            setError(\"All fields are required, and amount must be greater than 0.\");\n            return;\n        }\n\n        if (transaction_type === \"transfer\" && !to_balance_id) {\n            setError(\"Target balance must be selected for transfer transactions.\");\n            return;\n        }\n\n        // Disallow transfer to/from credit balance types\n        if (transaction_type === \"transfer\" && to_balance_id === balance_id) {\n            setError(\"Cannot transfer to the same balance.\");\n            return;\n        }\n\n        console.log(\"Spending Balance Type:\", balance_type);\n\n        try {\n            // Step 1: Create the transaction\n            await axios.post(\"/api/newTransactions\", {\n                user_id,\n                balance_id,\n                balance_type,\n                transaction_name,\n                transaction_type,\n                amount,\n                to_balance_id: transaction_type === \"transfer\" ||\n                    transaction_type === \"pay credit\" ? to_balance_id : null,\n            });\n\n            navigate(\"/transactionmanager\");\n        } catch (e) {\n            console.error(\"Error creating transaction:\", e);\n            setError(\"An error occurred. Please try again.\");\n        }\n    };\n\n    if (!validated) return <Navigate to=\"/login\" />;\n\n    return (\n        <div className={styles.container}>\n            <h1 className={styles.title}>New Transaction</h1>\n            <form onSubmit={createTransaction} className={styles.newTransactionBox}>\n                <h2>Transaction Name</h2>\n                <input\n                    type=\"text\"\n                    value={transaction_name}\n                    onChange={(e) => setTransactionName(e.target.value)}\n                    placeholder=\"e.g., Groceries\"\n                    required\n                />\n                <h2>Transaction Type</h2>\n                <select\n                    value={transaction_type}\n                    onChange={(e) => setTransactionType(e.target.value)}\n                >\n                    <option value=\"spending\">Spending</option>\n                    <option value=\"income\">Income</option>\n                    <option value=\"transfer\">Transfer</option>\n                    <option value=\"pay credit\">Pay Credit</option>\n                </select>\n                <h2>Select Balance</h2>\n                <select\n                    value={balance_id}\n                    onChange={(e) => {\n                        const selectedBalanceId = e.target.value;\n                        setBalanceID(selectedBalanceId);\n\n                        // Find the selected balance object\n                        const selectedBalance = balances.find(b => b.balance_id.toString() === selectedBalanceId);\n\n                        // Set the balance type if a balance is selected\n                        if (selectedBalance) {\n                            setBalanceType(selectedBalance.balance_type);\n                        } else {\n                            setBalanceType(null); // Reset balance type if no balance is selected\n                        }\n                    }}\n                    required\n                >\n                    <option value=\"\">Select Balance</option>\n                    {balances\n                        .filter(\n                            (b) => {\n                                if (transaction_type === \"pay credit\" || transaction_type === \"transfer\" || transaction_type === \"income\") {\n                                    return b.balance_id.toString() !== to_balance_id && // Exclude the selected \"Select Balance\"\n                                        b.balance_type !== \"credit\" // Exclude balances with the type \"credit\"\n                                }\n                                return true;\n                            })\n                        .map((balance) => (\n                            <option key={balance.balance_id} value={balance.balance_id}>\n                                {balance.balance_name}\n                            </option>\n                        ))}\n                </select>\n\n                {transaction_type === \"transfer\" && (\n                    <>\n                        <h2>To Balance</h2>\n                        <select\n                            value={to_balance_id}\n                            onChange={(e) => setToBalanceID(e.target.value)}\n                            required\n                        >\n                            <option value=\"\">Select Balance</option>\n                            {balances\n                                .filter(\n                                    (b) =>\n                                        b.balance_id.toString() !== balance_id && // Exclude the selected \"Select Balance\"\n                                        b.balance_type !== \"credit\" // Exclude balances with the type \"credit\"\n                                )\n                                .map((balance) => (\n                                    <option key={balance.balance_id} value={balance.balance_id}>\n                                        {balance.balance_name}\n                                    </option>\n                                ))}\n                        </select>\n                    </>\n                )}\n                {transaction_type === \"pay credit\" && (\n                    <>\n                        <h2>To Balance</h2>\n                        <select\n                            value={to_balance_id}\n                            onChange={(e) => setToBalanceID(e.target.value)}\n                            required\n                        >\n                            <option value=\"\">Select Balance</option>\n                            {balances\n                                .filter(\n                                    (b) =>\n                                        b.balance_id.toString() !== balance_id && // Exclude the selected \"Select Balance\"\n                                        b.balance_type !== \"wallet\" // Exclude balances with the type \"wallet\"\n                                )\n                                .map((balance) => (\n                                    <option key={balance.balance_id} value={balance.balance_id}>\n                                        {balance.balance_name}\n                                    </option>\n                                ))}\n                        </select>\n                    </>\n                )}\n                <h2>Amount</h2>\n                <input\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => setAmount(parseFloat(e.target.value))}\n                    placeholder=\"0.00\"\n                    required\n                />\n                <button type=\"submit\" className={styles.submitButton}>\n                    Submit\n                </button>\n                <button\n                    type=\"button\"\n                    className={styles.returnButton}\n                    onClick={() => navigate(-1)}\n                >\n                    Return\n                </button>\n                {error && <p className={styles.error}>{error}</p>}\n            </form>\n        </div>\n    );\n};\n\nexport default NewTransaction;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}